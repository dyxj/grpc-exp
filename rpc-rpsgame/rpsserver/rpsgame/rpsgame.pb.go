// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpsgame.proto

/*
Package rpsgame is a generated protocol buffer package.

protoc -I ./ rpsgame.proto --go_out=plugins=grpc:./

It is generated from these files:
	rpsgame.proto

It has these top-level messages:
	Req
	Resp
*/
package rpsgame

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sign int32

const (
	Sign_ROCK     Sign = 0
	Sign_PAPER    Sign = 1
	Sign_SCISSORS Sign = 2
)

var Sign_name = map[int32]string{
	0: "ROCK",
	1: "PAPER",
	2: "SCISSORS",
}
var Sign_value = map[string]int32{
	"ROCK":     0,
	"PAPER":    1,
	"SCISSORS": 2,
}

func (x Sign) String() string {
	return proto.EnumName(Sign_name, int32(x))
}
func (Sign) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Resp_State int32

const (
	Resp_BEGIN      Resp_State = 0
	Resp_START_TURN Resp_State = 1
	Resp_WAIT_TURN  Resp_State = 2
	Resp_WIN        Resp_State = 3
	Resp_LOSE       Resp_State = 4
	Resp_DRAW       Resp_State = 5
	Resp_OWIN       Resp_State = 6
	Resp_OLOSE      Resp_State = 7
)

var Resp_State_name = map[int32]string{
	0: "BEGIN",
	1: "START_TURN",
	2: "WAIT_TURN",
	3: "WIN",
	4: "LOSE",
	5: "DRAW",
	6: "OWIN",
	7: "OLOSE",
}
var Resp_State_value = map[string]int32{
	"BEGIN":      0,
	"START_TURN": 1,
	"WAIT_TURN":  2,
	"WIN":        3,
	"LOSE":       4,
	"DRAW":       5,
	"OWIN":       6,
	"OLOSE":      7,
}

func (x Resp_State) String() string {
	return proto.EnumName(Resp_State_name, int32(x))
}
func (Resp_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// Request message
type Req struct {
	// Types that are valid to be assigned to Event:
	//	*Req_Join
	//	*Req_Mysign
	Event isReq_Event `protobuf_oneof:"event"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isReq_Event interface {
	isReq_Event()
}

type Req_Join struct {
	Join *Req_Player `protobuf:"bytes,1,opt,name=join,oneof"`
}
type Req_Mysign struct {
	Mysign Sign `protobuf:"varint,2,opt,name=mysign,enum=rpsgame.Sign,oneof"`
}

func (*Req_Join) isReq_Event()   {}
func (*Req_Mysign) isReq_Event() {}

func (m *Req) GetEvent() isReq_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Req) GetJoin() *Req_Player {
	if x, ok := m.GetEvent().(*Req_Join); ok {
		return x.Join
	}
	return nil
}

func (m *Req) GetMysign() Sign {
	if x, ok := m.GetEvent().(*Req_Mysign); ok {
		return x.Mysign
	}
	return Sign_ROCK
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Req) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Req_OneofMarshaler, _Req_OneofUnmarshaler, _Req_OneofSizer, []interface{}{
		(*Req_Join)(nil),
		(*Req_Mysign)(nil),
	}
}

func _Req_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Req)
	// event
	switch x := m.Event.(type) {
	case *Req_Join:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Join); err != nil {
			return err
		}
	case *Req_Mysign:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Mysign))
	case nil:
	default:
		return fmt.Errorf("Req.Event has unexpected type %T", x)
	}
	return nil
}

func _Req_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Req)
	switch tag {
	case 1: // event.join
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Req_Player)
		err := b.DecodeMessage(msg)
		m.Event = &Req_Join{msg}
		return true, err
	case 2: // event.mysign
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Req_Mysign{Sign(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Req_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Req)
	// event
	switch x := m.Event.(type) {
	case *Req_Join:
		s := proto.Size(x.Join)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Req_Mysign:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Mysign))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Req_Player struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Req_Player) Reset()                    { *m = Req_Player{} }
func (m *Req_Player) String() string            { return proto.CompactTextString(m) }
func (*Req_Player) ProtoMessage()               {}
func (*Req_Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Req_Player) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response message
type Resp struct {
	// Types that are valid to be assigned to Event:
	//	*Resp_Gstate
	//	*Resp_Sign
	Event isResp_Event `protobuf_oneof:"event"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isResp_Event interface {
	isResp_Event()
}

type Resp_Gstate struct {
	Gstate Resp_State `protobuf:"varint,1,opt,name=gstate,enum=rpsgame.Resp_State,oneof"`
}
type Resp_Sign struct {
	Sign Sign `protobuf:"varint,2,opt,name=sign,enum=rpsgame.Sign,oneof"`
}

func (*Resp_Gstate) isResp_Event() {}
func (*Resp_Sign) isResp_Event()   {}

func (m *Resp) GetEvent() isResp_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Resp) GetGstate() Resp_State {
	if x, ok := m.GetEvent().(*Resp_Gstate); ok {
		return x.Gstate
	}
	return Resp_BEGIN
}

func (m *Resp) GetSign() Sign {
	if x, ok := m.GetEvent().(*Resp_Sign); ok {
		return x.Sign
	}
	return Sign_ROCK
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Resp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Resp_OneofMarshaler, _Resp_OneofUnmarshaler, _Resp_OneofSizer, []interface{}{
		(*Resp_Gstate)(nil),
		(*Resp_Sign)(nil),
	}
}

func _Resp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Resp)
	// event
	switch x := m.Event.(type) {
	case *Resp_Gstate:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Gstate))
	case *Resp_Sign:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Sign))
	case nil:
	default:
		return fmt.Errorf("Resp.Event has unexpected type %T", x)
	}
	return nil
}

func _Resp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Resp)
	switch tag {
	case 1: // event.gstate
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Resp_Gstate{Resp_State(x)}
		return true, err
	case 2: // event.sign
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Resp_Sign{Sign(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Resp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Resp)
	// event
	switch x := m.Event.(type) {
	case *Resp_Gstate:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Gstate))
	case *Resp_Sign:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Sign))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Req)(nil), "rpsgame.Req")
	proto.RegisterType((*Req_Player)(nil), "rpsgame.Req.Player")
	proto.RegisterType((*Resp)(nil), "rpsgame.Resp")
	proto.RegisterEnum("rpsgame.Sign", Sign_name, Sign_value)
	proto.RegisterEnum("rpsgame.Resp_State", Resp_State_name, Resp_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpsSvc service

type RpsSvcClient interface {
	Game(ctx context.Context, opts ...grpc.CallOption) (RpsSvc_GameClient, error)
}

type rpsSvcClient struct {
	cc *grpc.ClientConn
}

func NewRpsSvcClient(cc *grpc.ClientConn) RpsSvcClient {
	return &rpsSvcClient{cc}
}

func (c *rpsSvcClient) Game(ctx context.Context, opts ...grpc.CallOption) (RpsSvc_GameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RpsSvc_serviceDesc.Streams[0], c.cc, "/rpsgame.RpsSvc/Game", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpsSvcGameClient{stream}
	return x, nil
}

type RpsSvc_GameClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type rpsSvcGameClient struct {
	grpc.ClientStream
}

func (x *rpsSvcGameClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpsSvcGameClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RpsSvc service

type RpsSvcServer interface {
	Game(RpsSvc_GameServer) error
}

func RegisterRpsSvcServer(s *grpc.Server, srv RpsSvcServer) {
	s.RegisterService(&_RpsSvc_serviceDesc, srv)
}

func _RpsSvc_Game_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpsSvcServer).Game(&rpsSvcGameServer{stream})
}

type RpsSvc_GameServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type rpsSvcGameServer struct {
	grpc.ServerStream
}

func (x *rpsSvcGameServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpsSvcGameServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpsSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpsgame.RpsSvc",
	HandlerType: (*RpsSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Game",
			Handler:       _RpsSvc_Game_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpsgame.proto",
}

func init() { proto.RegisterFile("rpsgame.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6a, 0xf2, 0x40,
	0x10, 0xc0, 0xb3, 0x31, 0x7f, 0x74, 0x3e, 0x13, 0x96, 0xf9, 0x2e, 0xe2, 0x49, 0xd2, 0x43, 0xb5,
	0xd0, 0x50, 0xf4, 0x09, 0xa2, 0x15, 0x0d, 0x2d, 0x46, 0x66, 0x2d, 0x1e, 0x4b, 0xaa, 0x4b, 0x48,
	0xa9, 0x31, 0x9a, 0x20, 0x08, 0x7d, 0xc0, 0x3e, 0x56, 0xd9, 0x68, 0xa5, 0x5e, 0x7a, 0x9b, 0xe1,
	0xf7, 0x9b, 0xd9, 0x99, 0x59, 0x70, 0xf6, 0x79, 0x91, 0xc4, 0x1b, 0xe9, 0xe7, 0xfb, 0x6d, 0xb9,
	0x45, 0xfb, 0x9c, 0x7a, 0x9f, 0x50, 0x23, 0xb9, 0xc3, 0x1e, 0x18, 0xef, 0xdb, 0x34, 0x6b, 0xb1,
	0x0e, 0xeb, 0xfe, 0xeb, 0xff, 0xf7, 0x7f, 0x6c, 0x92, 0x3b, 0x7f, 0xfe, 0x11, 0x1f, 0xe5, 0x7e,
	0xaa, 0x51, 0xa5, 0xe0, 0x2d, 0x58, 0x9b, 0x63, 0x91, 0x26, 0x59, 0x4b, 0xef, 0xb0, 0xae, 0xdb,
	0x77, 0x2e, 0xb2, 0x48, 0x93, 0x6c, 0xaa, 0xd1, 0x19, 0xb7, 0x5b, 0x60, 0x9d, 0x4a, 0xd1, 0x05,
	0x3d, 0x5d, 0x57, 0xbd, 0x1b, 0xa4, 0xa7, 0xeb, 0xa1, 0x0d, 0xa6, 0x3c, 0xc8, 0xac, 0xf4, 0xbe,
	0x18, 0x18, 0x24, 0x8b, 0x1c, 0xef, 0xc1, 0x4a, 0x8a, 0x32, 0x2e, 0x65, 0x65, 0xb9, 0x57, 0x13,
	0x14, 0xb9, 0x2f, 0x14, 0x52, 0xad, 0x4f, 0x12, 0xde, 0x80, 0xf1, 0xd7, 0x04, 0x15, 0xf4, 0x56,
	0x60, 0x56, 0x75, 0xd8, 0x00, 0x73, 0x38, 0x9e, 0x84, 0x33, 0xae, 0xa1, 0x0b, 0x20, 0x16, 0x01,
	0x2d, 0x5e, 0x17, 0x2f, 0x34, 0xe3, 0x0c, 0x1d, 0x68, 0x2c, 0x83, 0xf0, 0x9c, 0xea, 0x68, 0x43,
	0x6d, 0x19, 0xce, 0x78, 0x0d, 0xeb, 0x60, 0x3c, 0x47, 0x62, 0xcc, 0x0d, 0x15, 0x3d, 0x52, 0xb0,
	0xe4, 0xa6, 0x8a, 0x22, 0x45, 0x2d, 0xd5, 0x30, 0xaa, 0xb0, 0x7d, 0x59, 0xe5, 0xae, 0x07, 0x86,
	0x7a, 0x5d, 0x59, 0x14, 0x8d, 0x9e, 0xb8, 0xa6, 0xac, 0x79, 0x30, 0x1f, 0x13, 0x67, 0xd8, 0x84,
	0xba, 0x18, 0x85, 0x42, 0x44, 0x24, 0xb8, 0xde, 0x1f, 0x80, 0x45, 0x79, 0x21, 0x0e, 0x2b, 0x75,
	0xf6, 0x49, 0xbc, 0x91, 0xd8, 0xfc, 0x7d, 0xf0, 0xb6, 0x73, 0xb5, 0xbc, 0xa7, 0x75, 0xd9, 0x03,
	0x7b, 0xb3, 0xaa, 0x8f, 0x1b, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0x28, 0x90, 0x54, 0x80, 0xc9,
	0x01, 0x00, 0x00,
}
